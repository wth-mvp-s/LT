/*
Deployment script for backup-VIRTUALEO-1710.1448

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "backup-VIRTUALEO-1710.1448"
:setvar DefaultFilePrefix "backup-VIRTUALEO-1710.1448"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'Creating User-Defined Table Type [dbo].[ClassroomConfigurationDataType]...';


GO
CREATE TYPE [dbo].[ClassroomConfigurationDataType] AS TABLE (
    [M365GroupName]        NVARCHAR (255) NOT NULL,
    [RgIndex]              INT            NOT NULL,
    [RgName]               NVARCHAR (255) NOT NULL,
    [RgDeploymentUrl]      NVARCHAR (MAX) NOT NULL,
    [RgTemplateLink]       NVARCHAR (MAX) NOT NULL,
    [RgOperationUrl]       NVARCHAR (MAX) NULL,
    [BastionDeploymentUrl] NVARCHAR (MAX) NOT NULL,
    [BastionTemplateLink]  NVARCHAR (MAX) NOT NULL,
    [BastionOperationUrl]  NVARCHAR (MAX) NULL,
    [MeetingUrl]           NVARCHAR (MAX) NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[ClassroomDataType]...';


GO
CREATE TYPE [dbo].[ClassroomDataType] AS TABLE (
    [Name]            NVARCHAR (255) NOT NULL,
    [Description]     NVARCHAR (MAX) NOT NULL,
    [DepartmentId]    INT            NOT NULL,
    [InstructorId]    NVARCHAR (255) NOT NULL,
    [VmImageId]       INT            NULL,
    [VmSizeId]        INT            NULL,
    [ClassroomTypeId] INT            NOT NULL,
    [VmPackId]        INT            NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[ClassroomScheduleDataType]...';


GO
CREATE TYPE [dbo].[ClassroomScheduleDataType] AS TABLE (
    [TimeZone]  NVARCHAR (100) NOT NULL,
    [StartDay]  DATE           NOT NULL,
    [EndDay]    DATE           NOT NULL,
    [StartTime] TIME (7)       NOT NULL,
    [EndTime]   TIME (7)       NOT NULL,
    [Monday]    BIT            NOT NULL,
    [Tuesday]   BIT            NOT NULL,
    [Wednesday] BIT            NOT NULL,
    [Thursday]  BIT            NOT NULL,
    [Friday]    BIT            NOT NULL,
    [Saturday]  BIT            NOT NULL,
    [Sunday]    BIT            NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[ClassroomStudentDataType]...';


GO
CREATE TYPE [dbo].[ClassroomStudentDataType] AS TABLE (
    [StudentId]    NVARCHAR (255) NOT NULL,
    [StudentIndex] INT            NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[DepartmentDataType]...';


GO
CREATE TYPE [dbo].[DepartmentDataType] AS TABLE (
    [Name]               NVARCHAR (255) NOT NULL,
    [OrganizationId]     INT            NOT NULL,
    [DepartmentParentId] INT            NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[DepartmentRoleDataType]...';


GO
CREATE TYPE [dbo].[DepartmentRoleDataType] AS TABLE (
    [UserId]       NVARCHAR (255) NOT NULL,
    [DepartmentId] INT            NOT NULL,
    [RoleId]       INT            NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[DepartmentType]...';


GO
CREATE TYPE [dbo].[DepartmentType] AS TABLE (
    [Id]                 INT            NOT NULL,
    [OrganizationId]     INT            NOT NULL,
    [DepartmentParentId] INT            NULL,
    [Name]               NVARCHAR (255) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[IdsList]...';


GO
CREATE TYPE [dbo].[IdsList] AS TABLE (
    [Id] INT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[OrganizationDataType]...';


GO
CREATE TYPE [dbo].[OrganizationDataType] AS TABLE (
    [Name]        NVARCHAR (255) NOT NULL,
    [BillingCode] NVARCHAR (255) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[TaskStatusDataType]...';


GO
CREATE TYPE [dbo].[TaskStatusDataType] AS TABLE (
    [Name]           VARCHAR (255)   NOT NULL,
    [InstanceId]     VARCHAR (255)   NOT NULL,
    [ExecutionId]    VARCHAR (255)   NOT NULL,
    [Status]         VARCHAR (255)   NOT NULL,
    [CreatedOn]      DATETIME2 (7)   NOT NULL,
    [Input]          NVARCHAR (MAX)  NULL,
    [FailureMessage] NVARCHAR (4000) NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[UserDepartmentRoleType]...';


GO
CREATE TYPE [dbo].[UserDepartmentRoleType] AS TABLE (
    [Id]           INT            NOT NULL,
    [DepartmentId] INT            NOT NULL,
    [RoleId]       INT            NOT NULL,
    [UserId]       NVARCHAR (255) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [dbo].[UserDepartmentsDataType]...';


GO
CREATE TYPE [dbo].[UserDepartmentsDataType] AS TABLE (
    [DepartmentId] INT NOT NULL);


GO
PRINT N'Creating Table [dbo].[AsynchronousTask]...';


GO
CREATE TABLE [dbo].[AsynchronousTask] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [OrganizationId] INT            NULL,
    [GroupName]      NVARCHAR (255) NOT NULL,
    [Order]          INT            NOT NULL,
    [Name]           NVARCHAR (255) NOT NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [Url]            NVARCHAR (MAX) NOT NULL,
    [State]          NVARCHAR (255) NOT NULL,
    [CreatedBy]      NVARCHAR (255) NOT NULL,
    [CreatedOn]      DATETIME       NOT NULL,
    [DeletedBy]      NVARCHAR (255) NULL,
    [DeletedOn]      DATETIME       NULL,
    CONSTRAINT [PK_AsynchronousTask] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Classroom]...';


GO
CREATE TABLE [dbo].[Classroom] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (255) NOT NULL,
    [Description]     NVARCHAR (MAX) NOT NULL,
    [InstructorId]    NVARCHAR (255) NOT NULL,
    [VmImageId]       INT            NULL,
    [VmSizeId]        INT            NULL,
    [ClassroomTypeId] INT            NOT NULL,
    [Active]          BIT            NOT NULL,
    [CreatedBy]       NVARCHAR (255) NOT NULL,
    [CreatedOn]       DATETIME       NOT NULL,
    [UpdatedBy]       NVARCHAR (255) NULL,
    [UpdatedOn]       DATETIME       NULL,
    [DeletedBy]       NVARCHAR (255) NULL,
    [DeletedOn]       DATETIME       NULL,
    [DepartmentId]    INT            NOT NULL,
    [VmPackId]        INT            NULL,
    CONSTRAINT [PK_Classroom] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ClassroomConfiguration]...';


GO
CREATE TABLE [dbo].[ClassroomConfiguration] (
    [Id]                   INT              IDENTITY (1, 1) NOT NULL,
    [ClassroomId]          INT              NOT NULL,
    [M365GroupName]        NVARCHAR (255)   NOT NULL,
    [RgIndex]              INT              NOT NULL,
    [RgName]               NVARCHAR (255)   NOT NULL,
    [RgDeploymentUrl]      NVARCHAR (MAX)   NOT NULL,
    [RgTemplateLink]       NVARCHAR (MAX)   NOT NULL,
    [RgOperationUrl]       NVARCHAR (MAX)   NULL,
    [BastionDeploymentUrl] NVARCHAR (MAX)   NOT NULL,
    [BastionTemplateLink]  NVARCHAR (MAX)   NOT NULL,
    [BastionOperationUrl]  NVARCHAR (MAX)   NULL,
    [MeetingUrl]           NVARCHAR (MAX)   NULL,
    [MeetingId]            UNIQUEIDENTIFIER NOT NULL,
    [CreatedBy]            NVARCHAR (255)   NOT NULL,
    [CreatedOn]            DATETIME         NOT NULL,
    [UpdatedBy]            NVARCHAR (255)   NULL,
    [UpdatedOn]            DATETIME         NULL,
    CONSTRAINT [PK_ClassroomConfiguration] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [AK_ClassroomConfiguration_ClassroomId] UNIQUE NONCLUSTERED ([ClassroomId] ASC)
);


GO
PRINT N'Creating Index [dbo].[ClassroomConfiguration].[UQ_ClassroomConfiguration_ClassroomId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UQ_ClassroomConfiguration_ClassroomId]
    ON [dbo].[ClassroomConfiguration]([ClassroomId] ASC);


GO
PRINT N'Creating Table [dbo].[ClassroomSchedule]...';


GO
CREATE TABLE [dbo].[ClassroomSchedule] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [ClassroomId] INT            NOT NULL,
    [TimeZone]    NVARCHAR (100) NOT NULL,
    [StartDay]    DATE           NOT NULL,
    [EndDay]      DATE           NOT NULL,
    [StartTime]   TIME (7)       NOT NULL,
    [EndTime]     TIME (7)       NOT NULL,
    [Monday]      BIT            NOT NULL,
    [Tuesday]     BIT            NOT NULL,
    [Wednesday]   BIT            NOT NULL,
    [Thursday]    BIT            NOT NULL,
    [Friday]      BIT            NOT NULL,
    [Saturday]    BIT            NOT NULL,
    [Sunday]      BIT            NOT NULL,
    [CreatedBy]   NVARCHAR (255) NOT NULL,
    [CreatedOn]   DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (255) NULL,
    [UpdatedOn]   DATETIME       NULL,
    CONSTRAINT [PK_ClassroomSchedule] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [AK_ClassroomSchedule_ClassroomId] UNIQUE NONCLUSTERED ([ClassroomId] ASC)
);


GO
PRINT N'Creating Index [dbo].[ClassroomSchedule].[UQ_ClassroomSchedule_ClassroomId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UQ_ClassroomSchedule_ClassroomId]
    ON [dbo].[ClassroomSchedule]([ClassroomId] ASC);


GO
PRINT N'Creating Table [dbo].[ClassroomStudent]...';


GO
CREATE TABLE [dbo].[ClassroomStudent] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [ClassroomId]  INT            NOT NULL,
    [StudentId]    NVARCHAR (255) NOT NULL,
    [StudentIndex] INT            NOT NULL,
    [CreatedBy]    NVARCHAR (255) NOT NULL,
    [CreatedOn]    DATETIME       NOT NULL,
    [UpdatedBy]    NVARCHAR (255) NULL,
    [UpdatedOn]    DATETIME       NULL,
    CONSTRAINT [PK_ClassroomStudent] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [AK_ClassroomStudent_ClassroomId_StudentId] UNIQUE NONCLUSTERED ([ClassroomId] ASC, [StudentId] ASC)
);


GO
PRINT N'Creating Index [dbo].[ClassroomStudent].[UQ_ClassroomStudent_Column]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UQ_ClassroomStudent_Column]
    ON [dbo].[ClassroomStudent]([ClassroomId] ASC, [StudentId] ASC);


GO
PRINT N'Creating Table [dbo].[ClassroomType]...';


GO
CREATE TABLE [dbo].[ClassroomType] (
    [Id]    INT            IDENTITY (1, 1) NOT NULL,
    [Code]  VARCHAR (3)    NOT NULL,
    [Label] NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_ClassroomType] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UK_ClassroomType] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating Table [dbo].[ClassroomVMStatus]...';


GO
CREATE TABLE [dbo].[ClassroomVMStatus] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [ClassroomId] INT            NOT NULL,
    [VMName]      NVARCHAR (255) NOT NULL,
    [TargetEmail] NVARCHAR (255) NULL,
    [DateStart]   DATETIME       NOT NULL,
    [DateEnd]     DATETIME       NULL,
    [CreatedBy]   NVARCHAR (255) NOT NULL,
    [CreatedOn]   DATETIME       NOT NULL,
    [UpdatedBy]   NVARCHAR (255) NULL,
    [UpdatedOn]   DATETIME       NULL,
    CONSTRAINT [PK_ClassroomVMStatus] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Department]...';


GO
CREATE TABLE [dbo].[Department] (
    [Id]                 INT            IDENTITY (1, 1) NOT NULL,
    [OrganizationId]     INT            NOT NULL,
    [DepartmentParentId] INT            NULL,
    [Name]               NVARCHAR (255) NOT NULL,
    [CreatedBy]          NVARCHAR (255) NOT NULL,
    [CreatedOn]          DATETIME2 (7)  NOT NULL,
    [UpdatedBy]          NVARCHAR (255) NULL,
    [UpdatedOn]          DATETIME2 (7)  NULL,
    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Organization]...';


GO
CREATE TABLE [dbo].[Organization] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (255) NOT NULL,
    [BillingCode] NVARCHAR (255) NOT NULL,
    [ParentId]    INT            NULL,
    [CreatedBy]   NVARCHAR (255) NOT NULL,
    [CreatedOn]   DATETIME2 (7)  NOT NULL,
    [UpdatedBy]   NVARCHAR (255) NULL,
    [UpdatedOn]   DATETIME2 (7)  NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[OrganizationSubscription]...';


GO
CREATE TABLE [dbo].[OrganizationSubscription] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [OrganizationId] INT            NOT NULL,
    [SubscriptionId] INT            NOT NULL,
    [StartDate]      DATETIME2 (7)  NULL,
    [EndDate]        DATETIME2 (7)  NULL,
    [Deleted]        BIT            NULL,
    [CreatedBy]      NVARCHAR (255) NOT NULL,
    [CreatedOn]      DATETIME2 (7)  NOT NULL,
    [UpdatedBy]      NVARCHAR (255) NULL,
    [UpdatedOn]      DATETIME2 (7)  NULL
);


GO
PRINT N'Creating Table [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Label]       NVARCHAR (255) NOT NULL,
    [Sku]         NVARCHAR (255) NOT NULL,
    [Description] NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Subscription]...';


GO
CREATE TABLE [dbo].[Subscription] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (255) NOT NULL,
    [NumberOfHours] INT            NOT NULL,
    [Reduction]     FLOAT (53)     NOT NULL,
    [CreatedBy]     NVARCHAR (255) NOT NULL,
    [CreatedOn]     DATETIME2 (7)  NOT NULL,
    [UpdatedBy]     NVARCHAR (255) NULL,
    [UpdatedOn]     DATETIME2 (7)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TaskStatus]...';


GO
CREATE TABLE [dbo].[TaskStatus] (
    [Id]             INT             IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (255)  NOT NULL,
    [InstanceId]     NVARCHAR (255)  NOT NULL,
    [ExecutionId]    NVARCHAR (255)  NOT NULL,
    [Status]         NVARCHAR (255)  NOT NULL,
    [CreatedOn]      DATETIME2 (7)   NOT NULL,
    [Input]          NVARCHAR (MAX)  NULL,
    [FailureMessage] NVARCHAR (4000) NULL,
    CONSTRAINT [PK_TaskStatus] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserDepartmentRole]...';


GO
CREATE TABLE [dbo].[UserDepartmentRole] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [DepartmentId] INT            NOT NULL,
    [RoleId]       INT            NOT NULL,
    [UserId]       NVARCHAR (255) NOT NULL,
    [CreatedBy]    NVARCHAR (255) NOT NULL,
    [CreatedOn]    DATETIME2 (7)  NOT NULL,
    [UpdatedBy]    NVARCHAR (255) NULL,
    [UpdatedOn]    DATETIME2 (7)  NULL,
    [DeletedBy]    NVARCHAR (255) NULL,
    [DeletedOn]    DATETIME       NULL,
    CONSTRAINT [PK_UserDepartmentRole] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserOrganizationRole]...';


GO
CREATE TABLE [dbo].[UserOrganizationRole] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [OrganizationId] INT            NOT NULL,
    [RoleId]         INT            NOT NULL,
    [UserId]         NVARCHAR (255) NOT NULL,
    [CreatedBy]      NVARCHAR (255) NOT NULL,
    [CreatedOn]      DATETIME2 (7)  NOT NULL,
    [UpdatedBy]      NVARCHAR (255) NULL,
    [UpdatedOn]      DATETIME2 (7)  NULL,
    [DeletedBy]      NVARCHAR (255) NULL,
    [DeletedOn]      DATETIME       NULL,
    CONSTRAINT [PK_UserOrganizationtRole] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[VMImage]...';


GO
CREATE TABLE [dbo].[VMImage] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Label]     NVARCHAR (255) NOT NULL,
    [Publisher] NVARCHAR (255) NOT NULL,
    [Offer]     NVARCHAR (255) NOT NULL,
    [Sku]       NVARCHAR (255) NOT NULL,
    [Version]   NVARCHAR (255) NOT NULL,
    CONSTRAINT [PK_VMImage] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[VMPack]...';


GO
CREATE TABLE [dbo].[VMPack] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Label]       NVARCHAR (255) NOT NULL,
    [Description] NVARCHAR (255) NOT NULL,
    [IsAvailable] BIT            NOT NULL,
    [Sku]         NVARCHAR (255) NOT NULL,
    [Version]     NVARCHAR (255) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[VMSize]...';


GO
CREATE TABLE [dbo].[VMSize] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Label]       NVARCHAR (255) NOT NULL,
    [Description] NVARCHAR (255) NOT NULL,
    [Sku]         NVARCHAR (255) NOT NULL,
    [StdPrice]    FLOAT (53)     NULL,
    CONSTRAINT [PK_VMSize] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint [dbo].[DF_AsynchronousTask_CreatedOn]...';


GO
ALTER TABLE [dbo].[AsynchronousTask]
    ADD CONSTRAINT [DF_AsynchronousTask_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[AsynchronousTask]...';


GO
ALTER TABLE [dbo].[AsynchronousTask]
    ADD DEFAULT ((0)) FOR [Order];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[AsynchronousTask]...';


GO
ALTER TABLE [dbo].[AsynchronousTask]
    ADD DEFAULT ('Running') FOR [State];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Classroom]...';


GO
ALTER TABLE [dbo].[Classroom]
    ADD DEFAULT ((2)) FOR [ClassroomTypeId];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Classroom_Active]...';


GO
ALTER TABLE [dbo].[Classroom]
    ADD CONSTRAINT [DF_Classroom_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Classroom_CreatedOn]...';


GO
ALTER TABLE [dbo].[Classroom]
    ADD CONSTRAINT [DF_Classroom_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Classroom]...';


GO
ALTER TABLE [dbo].[Classroom]
    ADD DEFAULT ((1)) FOR [DepartmentId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ClassroomConfiguration]...';


GO
ALTER TABLE [dbo].[ClassroomConfiguration]
    ADD DEFAULT (newid()) FOR [MeetingId];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomConfiguration_CreatedOn]...';


GO
ALTER TABLE [dbo].[ClassroomConfiguration]
    ADD CONSTRAINT [DF_ClassroomConfiguration_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Monday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Monday] DEFAULT ((1)) FOR [Monday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Thursday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Thursday] DEFAULT ((1)) FOR [Thursday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Sunday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Sunday] DEFAULT ((0)) FOR [Sunday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Wednesday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Wednesday] DEFAULT ((1)) FOR [Wednesday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Tuesday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Tuesday] DEFAULT ((1)) FOR [Tuesday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Friday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Friday] DEFAULT ((1)) FOR [Friday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_Saturday]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_Saturday] DEFAULT ((0)) FOR [Saturday];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomSchedule_CreatedOn]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule]
    ADD CONSTRAINT [DF_ClassroomSchedule_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomStudent_CreatedOn]...';


GO
ALTER TABLE [dbo].[ClassroomStudent]
    ADD CONSTRAINT [DF_ClassroomStudent_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassroomVMStatus_CreatedOn]...';


GO
ALTER TABLE [dbo].[ClassroomVMStatus]
    ADD CONSTRAINT [DF_ClassroomVMStatus_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Department_CreatedOn]...';


GO
ALTER TABLE [dbo].[Department]
    ADD CONSTRAINT [DF_Department_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Organization_CreatedOn]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[OrganizationSubscription]...';


GO
ALTER TABLE [dbo].[OrganizationSubscription]
    ADD DEFAULT ((0)) FOR [Deleted];


GO
PRINT N'Creating Default Constraint [dbo].[DF_UserDepartmentRole_CreatedOn]...';


GO
ALTER TABLE [dbo].[UserDepartmentRole]
    ADD CONSTRAINT [DF_UserDepartmentRole_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint [dbo].[DF_UserOrganizationRole_CreatedOn]...';


GO
ALTER TABLE [dbo].[UserOrganizationRole]
    ADD CONSTRAINT [DF_UserOrganizationRole_CreatedOn] DEFAULT (getutcdate()) FOR [CreatedOn];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[VMSize]...';


GO
ALTER TABLE [dbo].[VMSize]
    ADD DEFAULT (NULL) FOR [StdPrice];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Classroom_VMImage]...';


GO
ALTER TABLE [dbo].[Classroom] WITH NOCHECK
    ADD CONSTRAINT [FK_Classroom_VMImage] FOREIGN KEY ([VmImageId]) REFERENCES [dbo].[VMImage] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Classroom_VMSize]...';


GO
ALTER TABLE [dbo].[Classroom] WITH NOCHECK
    ADD CONSTRAINT [FK_Classroom_VMSize] FOREIGN KEY ([VmSizeId]) REFERENCES [dbo].[VMSize] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Classroom_VMPack]...';


GO
ALTER TABLE [dbo].[Classroom] WITH NOCHECK
    ADD CONSTRAINT [FK_Classroom_VMPack] FOREIGN KEY ([VmPackId]) REFERENCES [dbo].[VMPack] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Classroom_Department]...';


GO
ALTER TABLE [dbo].[Classroom] WITH NOCHECK
    ADD CONSTRAINT [FK_Classroom_Department] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Department] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Classroom_ClassroomType]...';


GO
ALTER TABLE [dbo].[Classroom] WITH NOCHECK
    ADD CONSTRAINT [FK_Classroom_ClassroomType] FOREIGN KEY ([ClassroomTypeId]) REFERENCES [dbo].[ClassroomType] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ClassroomConfiguration_Classroom]...';


GO
ALTER TABLE [dbo].[ClassroomConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassroomConfiguration_Classroom] FOREIGN KEY ([ClassroomId]) REFERENCES [dbo].[Classroom] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ClassroomSchedule_Classroom]...';


GO
ALTER TABLE [dbo].[ClassroomSchedule] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassroomSchedule_Classroom] FOREIGN KEY ([ClassroomId]) REFERENCES [dbo].[Classroom] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ClassroomStudent_Classroom]...';


GO
ALTER TABLE [dbo].[ClassroomStudent] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassroomStudent_Classroom] FOREIGN KEY ([ClassroomId]) REFERENCES [dbo].[Classroom] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ClassroomVMStatus_Classroom]...';


GO
ALTER TABLE [dbo].[ClassroomVMStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_ClassroomVMStatus_Classroom] FOREIGN KEY ([ClassroomId]) REFERENCES [dbo].[Classroom] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Department_Organization]...';


GO
ALTER TABLE [dbo].[Department] WITH NOCHECK
    ADD CONSTRAINT [FK_Department_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Organization_Organization]...';


GO
ALTER TABLE [dbo].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([ParentId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OrganizationSubscription_Subscription]...';


GO
ALTER TABLE [dbo].[OrganizationSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationSubscription_Subscription] FOREIGN KEY ([SubscriptionId]) REFERENCES [dbo].[Subscription] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OrganizationSubscription_Organization]...';


GO
ALTER TABLE [dbo].[OrganizationSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationSubscription_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserDepartmentRole_Department]...';


GO
ALTER TABLE [dbo].[UserDepartmentRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserDepartmentRole_Department] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Department] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserDepartmentRole_Role]...';


GO
ALTER TABLE [dbo].[UserDepartmentRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserDepartmentRole_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserOrganizationtRole_Organization]...';


GO
ALTER TABLE [dbo].[UserOrganizationRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserOrganizationtRole_Organization] FOREIGN KEY ([OrganizationId]) REFERENCES [dbo].[Organization] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserOrganizationtRole_Role]...';


GO
ALTER TABLE [dbo].[UserOrganizationRole] WITH NOCHECK
    ADD CONSTRAINT [FK_UserOrganizationtRole_Role] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]);


GO
PRINT N'Creating Check Constraint [dbo].[CHK_PackOrImageAndSize]...';


GO
ALTER TABLE [dbo].[Classroom] WITH NOCHECK
    ADD CONSTRAINT [CHK_PackOrImageAndSize] CHECK ([VmImageId] IS NULL AND [VmSizeId] IS NULL AND [VmPackId] IS NOT NULL OR [VmImageId] IS NOT NULL AND [VmSizeId] IS NOT NULL AND [VmPackId] IS NULL);


GO
PRINT N'Creating Procedure [dbo].[usp_AF_ClassroomVMStatus]...';


GO
CREATE PROCEDURE [dbo].[usp_AF_ClassroomVMStatus]
	@MachineName NVARCHAR(255),
	@ClassroomName NVARCHAR(255),
	@ActionIsStart BIT,
	@EventDate DATETIME
AS
BEGIN
	SET NOCOUNT OFF; -- Number of rows updated is used by azure function to consider that proc was succeed

	DECLARE @ClassroomId INT = (SELECT TOP 1 ClassroomId
								FROM [dbo].[ClassroomConfiguration]
								WHERE RgName = @ClassroomName
								ORDER BY Id DESC)

	IF @ActionIsStart = 1
	BEGIN
		INSERT INTO dbo.ClassroomVMStatus(ClassroomId, VMName, DateStart, CreatedBy)
		VALUES (@ClassroomId, @MachineName, @EventDate, 'AF_RessourceGroup')
	END
	ELSE
	BEGIN
		UPDATE dbo.ClassroomVMStatus
		SET DateEnd = @EventDate,
			UpdatedBy = 'Azure function',
			UpdatedOn = GETDATE()
		WHERE ClassroomId = @ClassroomId
			AND VMName = @MachineName
			AND DateEnd IS NULL
			AND @EventDate > DateStart
	END

END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomConfigurationsManager_GetByClassroomId]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomConfigurationsManager_GetByClassroomId]
	@ClassroomId INT
AS
BEGIN

	/****************************************/
	/*	IMPORTANT							*/
	/*	ONLY ONE CONFIGURATION BY CLASSROOM	*/
	/*		-> TODO: MODIFY MODEL			*/
	/****************************************/
	SELECT TOP 1
		[Id]
		,[ClassroomId]
		,[M365GroupName]
		,[RgIndex]
		,[RgName]
		,[RgDeploymentUrl]
		,[RgTemplateLink]
		,[RgOperationUrl]
		,[BastionDeploymentUrl]
		,[BastionTemplateLink]
		,[BastionOperationUrl]
		,[MeetingUrl]
		,[MeetingId]
		,[CreatedBy]
		,[CreatedOn]
		,[UpdatedBy]
		,[UpdatedOn]
	FROM [dbo].[ClassroomConfiguration] WITH (NOLOCK)
	WHERE [ClassroomId] = @ClassroomId;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomConfigurationsManager_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomConfigurationsManager_GetById]
	@Id INT
AS
BEGIN

	SELECT
		[Id]
		,[ClassroomId]
		,[M365GroupName]
		,[RgIndex]
		,[RgName]
		,[RgDeploymentUrl]
		,[RgTemplateLink]
		,[RgOperationUrl]
		,[BastionDeploymentUrl]
		,[BastionTemplateLink]
		,[BastionOperationUrl]
		,[MeetingUrl]
		,[MeetingId]
		,[CreatedBy]
		,[CreatedOn]
		,[UpdatedBy]
		,[UpdatedOn]
	FROM [dbo].[ClassroomConfiguration] WITH (NOLOCK)
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomSchedulesManager_GetByClassroomId]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomSchedulesManager_GetByClassroomId]
	@ClassroomId INT
AS
BEGIN

	/************************************/
	/*	IMPORTANT						*/
	/*	ONLY ONE SCHEDULE BY CLASSROOM	*/
	/*		-> TODO: MODIFY MODEL		*/
	/************************************/
	SELECT TOP 1
		[Id]
		,[ClassroomId]
		,[TimeZone]
		,[StartDay]
		,[EndDay]
		,[StartTime]
		,[EndTime]
		,[Monday]
		,[Tuesday]
		,[Wednesday]
		,[Thursday]
		,[Friday]
		,[Saturday]
		,[Sunday]
		,[CreatedBy]
		,[CreatedOn]
		,[UpdatedBy]
		,[UpdatedOn]
	FROM [dbo].[ClassroomSchedule] WITH (NOLOCK)
	WHERE [ClassroomId] = @ClassroomId;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomSchedulesManager_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomSchedulesManager_GetById]
	@Id INT
AS
BEGIN

	SELECT
		[Id]
		,[ClassroomId]
		,[TimeZone]
		,[StartDay]
		,[EndDay]
		,[StartTime]
		,[EndTime]
		,[Monday]
		,[Tuesday]
		,[Wednesday]
		,[Thursday]
		,[Friday]
		,[Saturday]
		,[Sunday]
		,[CreatedBy]
		,[CreatedOn]
		,[UpdatedBy]
		,[UpdatedOn]
	FROM [dbo].[ClassroomSchedule] WITH (NOLOCK)
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomsManager_DeleteById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomsManager_DeleteById]
	@Id INT,
	@DeletedBy NVARCHAR(255)
AS
BEGIN
	
	UPDATE [dbo].[Classroom]
	SET
		[Active] = 0
		,[DeletedBy] = @DeletedBy
		,[DeletedOn] = GETUTCDATE()
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomsManager_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomsManager_GetById]
	@Id INT
AS
BEGIN
	
	SELECT TOP 1
		C.[Id]
		,C.[DepartmentId]
		,C.[Name]
		,C.[Description]
		,C.[InstructorId]
		,C.[VmImageId]
		,C.[VmSizeId]
		,C.[VmPackId]
		,C.[ClassroomTypeId]
		,C.[Active]
		,D.OrganizationId
		,C.[CreatedBy]
		,C.[CreatedOn]
		,C.[UpdatedBy]
		,C.[UpdatedOn]
		,C.[DeletedBy]
		,C.[DeletedOn]
		,CC.M365GroupName
	FROM [dbo].[Classroom] C WITH (NOLOCK)
	INNER JOIN dbo.Department D ON D.Id = C.DepartmentId
	INNER JOIN dbo.ClassroomConfiguration CC ON CC.ClassroomId = C.Id
	WHERE C.[Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomsManager_Select]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomsManager_Select]
	@Active BIT = NULL,
	@UserId NVARCHAR(255) = NULL,
	@DepartmentIds [dbo].[UserDepartmentsDataType] READONLY
AS
BEGIN
	DECLARE @HasDept BIT = NULL

	IF EXISTS (select 1 from @DepartmentIds)
	begin
		set @HasDept = 1
	end

	SELECT
		C.[Id]
		,C.[DepartmentId]
		,C.[Name]
		,C.[Description]
		,C.[InstructorId]
		,C.[VmImageId]
		,C.[VmSizeId]
		,C.[VmPackId]
		,C.[ClassroomTypeId]
		,C.[Active]
		,D.OrganizationId
		,C.[CreatedBy]
		,C.[CreatedOn]
		,C.[UpdatedBy]
		,C.[UpdatedOn]
		,C.[DeletedBy]
		,C.[DeletedOn]
		,CC.M365GroupName
	FROM [dbo].[Classroom] C WITH (NOLOCK)
	INNER JOIN dbo.Department D ON D.Id = C.DepartmentId
	INNER JOIN dbo.ClassroomConfiguration CC ON CC.ClassroomId = C.Id
	WHERE
		[Active] = ISNULL(@Active, [Active])
		AND (
			@UserId IS NULL
			OR [InstructorId] = @UserId
			OR @UserId  IN (SELECT [StudentId] FROM [dbo].[ClassroomStudent] CS WITH (NOLOCK) WHERE CS.[ClassroomId] = C.[Id])
			OR DepartmentId in (SELECT [DepartmentId] FROM @DepartmentIds)
		);

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomStudentsManager_ListByClassroomId]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomStudentsManager_ListByClassroomId]
	@ClassroomId INT
AS
BEGIN
	
	SELECT
		[Id]
		,[ClassroomId]
		,[StudentId]
		,[StudentIndex]
		,[CreatedBy]
		,[CreatedOn]
		,[UpdatedBy]
		,[UpdatedOn]
	FROM [dbo].[ClassroomStudent] WITH (NOLOCK)
	WHERE [ClassroomId] = @ClassroomId;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomTypesManager_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomTypesManager_GetById]
	@Id INT
AS
BEGIN

	SELECT
		[Id]
		,[Code]
		,[Label]
	FROM [dbo].[ClassroomType]
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomTypesManager_List]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomTypesManager_List]
AS
BEGIN

	SELECT
		[Id]
		,[Code]
		,[Label]
	FROM [dbo].[ClassroomType] WITH (NOLOCK);

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomVMStatus_GetByDepartments]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomVMStatus_GetByDepartments]
	@Ids [IdsList] READONLY,
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN
	
	SELECT CS.[Id]
		, CS.[ClassroomId]
		, CS.[VMName]
		, CS.[TargetEmail]
		, CS.[DateStart]
		, CS.[DateEnd]
		, C.DepartmentId
		, D.[Name] AS DepartmentName
		, V.Id AS VMSizeId
		, V.StdPrice AS VMPrice
	FROM  @Ids I
	INNER JOIN dbo.Classroom C ON C.DepartmentId = I.Id
	INNER JOIN dbo.Department D ON D.Id = C.DepartmentId
	INNER JOIN  [dbo].[ClassroomVMStatus] CS ON CS.ClassroomId = C.Id
	INNER JOIN dbo.VMSize V ON V.Id = c.VmSizeId
	WHERE CS.DateStart BETWEEN @StartDate AND @EndDate
		OR CS.DateEnd BETWEEN @StartDate AND @EndDate
END
GO
PRINT N'Creating Procedure [dbo].[usp_API_DepartementCost_Select]...';


GO
CREATE PROCEDURE [dbo].[usp_API_DepartementCost_Select]
    @Name varchar(255)
AS
BEGIN
    SELECT
        O.Name	AS Organization,
		S.Name	AS Subscription,
		OS.Id,
		OS.StartDate,
		OS.EndDate,
		OS.CreatedBy,
		OS.CreatedOn,
		OS.UpdatedBy,
		OS.UpdatedOn
    FROM
        [dbo].[OrganizationSubscription] OS
        INNER JOIN [dbo].[Organization] O ON OS.OrganizationId = O.Id
		INNER JOIN [dbo].[Subscription] S ON OS.SubscriptionId = S.Id
	WHERE O.Name = @Name
END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_Department_Add]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_Department_Add]
	@Departments DepartmentType READONLY
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @Result TABLE(OldId INT, [NewId] INT)

	-- DepartmentParentId exists on db
	MERGE [dbo].[Department] AS T
	USING (SELECT * FROM @Departments WHERE DepartmentParentId > 0) AS S ON (1=0)
	WHEN NOT MATCHED THEN
		INSERT ([OrganizationId], [DepartmentParentId], [Name], [CreatedBy], [CreatedOn])
		VALUES (S.[OrganizationId], S.[DepartmentParentId], S.[Name], 'virtualeo', GETDATE())
	OUTPUT S.Id, INSERTED.Id INTO @Result;

	-- DepartmentParentId has just been inserted
	MERGE [dbo].[Department] AS T
	USING (
		SELECT * 
		FROM @Departments d 
		INNER JOIN @Result r on r.OldId = d.DepartmentParentId 
		WHERE DepartmentParentId < 0
	) AS S ON (1=0)
	WHEN NOT MATCHED THEN
		INSERT ([OrganizationId], [DepartmentParentId], [Name], [CreatedBy], [CreatedOn])
		VALUES (S.[OrganizationId], S.[NewId], S.[Name], 'virtualeo', GETDATE())
	OUTPUT S.Id, INSERTED.Id INTO @Result;

	SELECT OldId, [NewId]
	FROM @Result;

END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_Department_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_Department_Upsert]
	@Department [dbo].[DepartmentDataType] READONLY,
	@UpsertedBy NVARCHAR(255),
	@DepartmentId INT = NULL OUTPUT
AS
BEGIN

	/****************************************/
	/*	IF @OrganizationId is null OR < 1	*/
	/*		-> CREATE Department		    */
	/****************************************/
	IF (ISNULL(@DepartmentId, 0) < 1)
	BEGIN

		INSERT INTO [dbo].[Department]
			([Name], [OrganizationId], [DepartmentParentId], [CreatedBy], [CreatedOn])
		SELECT TOP 1
			[Name], [OrganizationId], [DepartmentParentId], @UpsertedBy, GETUTCDATE()
		FROM @Department;

		SET @DepartmentId = SCOPE_IDENTITY();

	END
	/********************************************/
	/*	IF @ClassroomId is not null AND >= 1	*/
	/*		-> CHECK IF Department EXISTS		*/
	/*		-> UPDATE Department					*/
	/********************************************/
	ELSE
	BEGIN
		
		IF NOT EXISTS (SELECT TOP 1 [Id] FROM [dbo].[Department] WHERE [Id] = @DepartmentId)
		BEGIN

			DECLARE @ErrorMsg NVARCHAR(255);
			
			SET @ErrorMsg='Department with Id ' + CAST(@DepartmentId AS NVARCHAR(50)) + ' not exists';
			
			RAISERROR(@ErrorMsg, 1, 1);

		END

		UPDATE [dbo].[Department]
			SET
				[Name] = C.[Name]
				,[OrganizationId] = C.[OrganizationId]
				,[DepartmentParentId] = C.[DepartmentParentId]
				,[UpdatedBy] = @UpsertedBy
				,[UpdatedOn] = GETUTCDATE()
		FROM (SELECT TOP 1 * FROM @Department) C
		WHERE [Id] = @DepartmentId;

	END

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_DepartmentOrganization_ById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_DepartmentOrganization_ById]
	@DepartmentId int
AS
BEGIN

	DECLARE @DepartmentsLv1 TABLE (Id int);
	INSERT INTO @DepartmentsLv1 (Id) SELECT Id FROM Department WHERE DepartmentParentId IS NULL;
	
	select 
		Department.Id as Id, 
		Department.Name as Name, 
		Department.OrganizationId as OrganizationId, 
		Organization.Name as OrganizationName, 
		[DepartmentParentId],
		CASE 
			WHEN Department.DepartmentParentId IS NULL THEN 1
			WHEN d1.Id IS NOT NULL THEN 2
			ELSE 3
		END as Level
	from Department 
	join Organization on Department.OrganizationId = Organization.Id
	left join @DepartmentsLv1 d1 on d1.Id = Department.DepartmentParentId
	where Department.Id = @DepartmentId

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_DepartmentRole_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_DepartmentRole_Upsert]
	@DeptRole [dbo].[DepartmentRoleDataType] READONLY,
	@UpsertedBy NVARCHAR(255),
	@UserDepartmentRoleId INT = NULL OUTPUT
AS
BEGIN

	/****************************************/
	/*	IF @OrganizationId is null OR < 1	*/
	/*		-> CREATE UserDepartmentRole    */
	/****************************************/
	IF (ISNULL(@UserDepartmentRoleId, 0) < 1)
	BEGIN

		INSERT INTO [dbo].[UserDepartmentRole]
			([UserId], [DepartmentId], [RoleId], [CreatedBy], [CreatedOn])
		SELECT TOP 1
			[UserId], [DepartmentId], [RoleId], @UpsertedBy, GETUTCDATE()
		FROM @DeptRole;

		SET @UserDepartmentRoleId = SCOPE_IDENTITY();

	END
	/********************************************/
	/*	IF @ClassroomId is not null AND >= 1	*/
	/*		-> CHECK IF UserDepartmentRole EXISTS		*/
	/*		-> UPDATE UserDepartmentRole					*/
	/********************************************/
	ELSE
	BEGIN
		
		IF NOT EXISTS (SELECT TOP 1 [Id] FROM [dbo].[UserDepartmentRole] WHERE [Id] = @UserDepartmentRoleId)
		BEGIN

			DECLARE @ErrorMsg NVARCHAR(255);
			
			SET @ErrorMsg='UserDepartmentRole with Id ' + CAST(@UserDepartmentRoleId AS NVARCHAR(50)) + ' not exists';
			
			RAISERROR(@ErrorMsg, 1, 1);

		END

		UPDATE [dbo].[UserDepartmentRole]
			SET
				[UserId] = C.[UserId]
				,[DepartmentId] = C.[DepartmentId]
				,[RoleId] = C.[RoleId]
				,[UpdatedBy] = @UpsertedBy
				,[UpdatedOn] = GETUTCDATE()
		FROM (SELECT TOP 1 * FROM @DeptRole) C
		WHERE [Id] = @UserDepartmentRoleId;

	END

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_Departments_GetByIds]...';


GO
CREATE PROCEDURE [dbo].usp_Api_Departments_GetByIds
	@Ids [IdsList] READONLY
AS
BEGIN
	
	SELECT D.Id
		, D.[Name]
		, D.OrganizationId
		, D.DepartmentParentId
	FROM  @Ids I
	INNER JOIN dbo.Department D ON D.Id = I.Id
END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_Organization_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_Organization_Upsert]
	@Organization [dbo].[OrganizationDataType] READONLY,
	@UpsertedBy NVARCHAR(255),
	@OrganizationId INT = NULL OUTPUT
AS
BEGIN

	/****************************************/
	/*	IF @OrganizationId is null OR < 1	*/
	/*		-> CREATE Organization		    */
	/****************************************/
	IF (ISNULL(@OrganizationId, 0) < 1)
	BEGIN

		INSERT INTO [dbo].[Organization]
			([Name], [BillingCode], [CreatedBy], [CreatedOn])
		SELECT TOP 1
			[Name], [BillingCode], @UpsertedBy, GETUTCDATE()
		FROM @Organization;

		SET @OrganizationId = SCOPE_IDENTITY();

	END
	/********************************************/
	/*	IF @ClassroomId is not null AND >= 1	*/
	/*		-> CHECK IF Organization EXISTS		*/
	/*		-> UPDATE Organization					*/
	/********************************************/
	ELSE
	BEGIN
		
		IF NOT EXISTS (SELECT TOP 1 [Id] FROM [dbo].[Organization] WHERE [Id] = @OrganizationId)
		BEGIN

			DECLARE @ErrorMsg NVARCHAR(255);
			
			SET @ErrorMsg='Organization with Id ' + CAST(@OrganizationId AS NVARCHAR(50)) + ' not exists';
			
			RAISERROR(@ErrorMsg, 1, 1);

		END

		UPDATE [dbo].[Organization]
			SET
				[Name] = C.[Name]
				,[BillingCode] = C.[BillingCode]
				,[UpdatedBy] = @UpsertedBy
				,[UpdatedOn] = GETUTCDATE()
		FROM (SELECT TOP 1 * FROM @Organization) C
		WHERE [Id] = @OrganizationId;

	END

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_TaskStatus_SelectLast]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_TaskStatus_SelectLast]
    @InstanceId varchar(255),
    @ExecutionId varchar(255)
AS
BEGIN
	/*
	Select last ProgressReport and Last 
	*/
	 SELECT STATUS, CREATEDON, NAME 
	  FROM [DBO].[TASKSTATUS] WHERE ID = (
		SELECT TOP 1 ID
		FROM [DBO].[TASKSTATUS]
		WHERE INSTANCEID = @InstanceId AND EXECUTIONID = @ExecutionId AND [NAME] = N'ProgressReport'
		ORDER BY CREATEDON DESC)
	UNION ALL
		SELECT STATUS, CREATEDON, NAME 
	  FROM [DBO].[TASKSTATUS] WHERE ID = (
		SELECT TOP 1 ID
		FROM [DBO].[TASKSTATUS]
		WHERE INSTANCEID = @InstanceId AND EXECUTIONID = @ExecutionId
		ORDER BY CREATEDON DESC)
END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_TaskStatus_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_TaskStatus_Upsert]
	@TaskInfo [dbo].[TaskStatusDataType] READONLY,
	@TaskId INT = NULL OUTPUT
AS
BEGIN
	SET @TaskId = NULL;
	/****************************************/
	/*	CHECK IF TaskId EXISTS	*/
	/*	INITIALIZE @TaskId		*/
	/****************************************/
	IF (ISNULL(@TaskId, 0) < 1)
	BEGIN
		INSERT INTO [dbo].[TaskStatus]
			([Name], [InstanceId], [ExecutionId], [CreatedOn], [Status], [Input], [FailureMessage])
		SELECT TOP 1
			[Name], [InstanceId], [ExecutionId], [CreatedOn], [Status], [Input], [FailureMessage]
		FROM @TaskInfo;

		SET @TaskId = SCOPE_IDENTITY();
	END
	ELSE
	BEGIN
		IF NOT EXISTS (SELECT TOP 1 [Id] FROM [dbo].[TaskStatus] WHERE [Id] = @TaskId)
		BEGIN

			DECLARE @ErrorMsg NVARCHAR(255);
			
			SET @ErrorMsg='Task with Id ' + CAST(@TaskId AS NVARCHAR(50)) + ' not exists';
			
			RAISERROR(@ErrorMsg, 1, 1);
		END
		UPDATE [dbo].[TaskStatus]
			SET
				[Name] = C.[Name]
				,[InstanceId] = C.[InstanceId]
				,[ExecutionId] = C.[ExecutionId]
				,[CreatedOn] = C.[CreatedOn]
				,[Status] = C.[Status]
				, [Input]= C.[Input]
				, [FailureMessage] = C.[FailureMessage]
		FROM (SELECT TOP 1 * FROM @TaskInfo) C
		WHERE [Id] = @TaskId;
	END
END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_UserDepartmentRole_Add]...';


GO
CREATE PROCEDURE [dbo].usp_Api_UserDepartmentRole_Add
	@UserDepartmentRoles UserDepartmentRoleType READONLY
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @Result TABLE(OldId INT, [NewId] INT)

	MERGE [dbo].[UserDepartmentRole] AS T
	USING @UserDepartmentRoles AS S ON (1=0)
	WHEN NOT MATCHED THEN
		INSERT ([DepartmentId], [RoleId], [UserId], [CreatedBy], [CreatedOn])
		VALUES (S.[DepartmentId], S.[RoleId], S.[UserId], 'virtualeo', GETDATE())
	OUTPUT S.Id, INSERTED.Id INTO @Result;

	SELECT OldId, [NewId]
	FROM @Result;

END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_UserDepartmentRole_DeleteById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_UserDepartmentRole_DeleteById]
	@Ids IdsList READONLY,
	@DeletedBy NVARCHAR(255)
AS
BEGIN
	UPDATE u
	SET
		[DeletedBy] = @DeletedBy
		,[DeletedOn] = GETUTCDATE()
	FROM [dbo].[UserDepartmentRole] u
	INNER JOIN @Ids i ON u.Id = i.Id;
END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_UserDepartmentRole_ListByUserId]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_UserDepartmentRole_ListByUserId]
	@UserId NVARCHAR(255)
AS
BEGIN

/*
Select RoleId for all departments under a specific userId
*/

WITH cte as (
    select t.id, t.DepartmentParentId, t.OrganizationId, UserDepartmentRole.RoleId
    from department t
	inner join UserDepartmentRole on UserDepartmentRole.DepartmentId = t.Id 
    where userId = @UserId and DeletedOn IS NULL

    union all

    select t.id, t.DepartmentParentId, t.OrganizationId, c.RoleId
    from department t
    inner join cte c on (c.Id=t.DepartmentParentId)
)
select distinct t.id as DepartmentId, t. DepartmentParentId, t.OrganizationId, t.RoleId from cte t;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_UserRole_GetRoleByUserAndDepartment]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_UserRole_GetRoleByUserAndDepartment]
	@UserId  NVARCHAR(255)
	, @DepartmentId	INT
AS
BEGIN
	SET NOCOUNT ON;

	WITH CTE
	AS (
		SELECT 1 AS I,  D.Id, D.DepartmentParentId
		FROM Department D
		WHERE D.Id = @DepartmentId
		UNION ALL
		SELECT (CTE.I+1) AS I, D.Id, D.DepartmentParentId
		FROM CTE
			INNER JOIN Department D ON D.Id = CTE.DepartmentParentId
	)
	SELECT TOP 1 R.[Id], R.[Label], R.[Sku], R.[Description]
	FROM CTE
		INNER JOIN [dbo].[UserDepartmentRole] UDR ON UDR.DepartmentId = CTE.Id AND UDR.UserId = @UserId
		INNER JOIN [dbo].[Role] R ON R.Id = UDR.RoleId
	ORDER BY I ASC; -- We want to retreive the role with the thinnest scope
END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_VMImagesManager_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_VMImagesManager_GetById]
	@Id INT
AS
BEGIN

	SELECT
		[Id]
		,[Label]
		,[Publisher]
		,[Offer]
		,[Sku]
		,[Version]
	FROM [dbo].[VMImage]
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_VMImagesManager_List]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_VMImagesManager_List]
AS
BEGIN

	SELECT
		[Id]
		,[Label]
		,[Publisher]
		,[Offer]
		,[Sku]
		,[Version]
	FROM [dbo].[VMImage] WITH (NOLOCK);

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_VMPack_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_VMPack_GetById]
	@Id INT
AS
BEGIN

	SELECT
		[Id]
		,[Label]
		,[Description]
		,[IsAvailable]
		,[Sku]
		,[Version]
	FROM [dbo].[VMPack]
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_VMPack_List]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_VMPack_List]
AS
BEGIN
	SELECT
		[Id]
		,[Label]
		,[Description]
		,[IsAvailable]
		,[Sku]
		,[Version]
	FROM [dbo].[VMPack];
END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_VMSizesManager_GetById]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_VMSizesManager_GetById]
	@Id INT
AS
BEGIN

	SELECT
		[Id]
		,[Label]
		,[Description]
		,[Sku]
	FROM [dbo].[VMSize]
	WHERE [Id] = @Id;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_VMSizesManager_List]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_VMSizesManager_List]
AS
BEGIN

	SELECT
		[Id]
		,[Label]
		,[Description]
		,[Sku]
	FROM [dbo].[VMSize] WITH (NOLOCK);

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Core_ClassroomConfiguration_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Core_ClassroomConfiguration_Upsert]
	@ClassroomId INT,
	@ClassroomConfiguration [dbo].[ClassroomConfigurationDataType] READONLY,
	@UpsertedBy NVARCHAR(255),
	@ClassroomConfigurationId INT = NULL OUTPUT
AS
BEGIN

	/************************************************************/
	/*	IMPORTANT												*/
	/*	ONE & ONLY ONE ROW EXPECTED FOR	@ClassroomConfiguration	*/
	/*	ONLY ONE CONFIGURATION BY CLASSROOM						*/
	/*		-> TODO: MODIFY MODEL								*/
	/************************************************************/

	-- USE @ClassroomId to get current @ClassroomConfigurationId
	SET @ClassroomConfigurationId = NULL;

	/********************************************/
	/*	CHECK IF CLASSROOM CONFIGURATION EXISTS	*/
	/*	INITIALIZE @ClassroomConfigurationId	*/
	/********************************************/
	SELECT TOP 1 @ClassroomConfigurationId = [Id]
	FROM [dbo].[ClassroomConfiguration]
	WHERE [ClassroomId] = @ClassroomId
	
	/********************************************/
	/*	IF @ClassroomConfigurationId is null	*/
	/*		-> CREATE ClassroomConfiguration	*/
	/********************************************/
	IF (@ClassroomConfigurationId IS NULL)
	BEGIN

		INSERT INTO [dbo].[ClassroomConfiguration]
			([ClassroomId], [M365GroupName], [RgIndex], [RgName], [RgDeploymentUrl], [RgTemplateLink],
			[RgOperationUrl], [BastionDeploymentUrl], [BastionTemplateLink], [BastionOperationUrl], [MeetingUrl],
			[CreatedBy], [CreatedOn])
		SELECT TOP 1
			@ClassroomId, [M365GroupName], [RgIndex], [RgName], [RgDeploymentUrl], [RgTemplateLink],
			[RgOperationUrl], [BastionDeploymentUrl], [BastionTemplateLink], [BastionOperationUrl], [MeetingUrl],
			@UpsertedBy, GETUTCDATE()
		FROM @ClassroomConfiguration;

		SET @ClassroomConfigurationId = SCOPE_IDENTITY();

	END
	/************************************************/
	/*	IF @ClassroomConfigurationId is not null	*/
	/*		-> UPDATE ClassroomConfiguration		*/
	/************************************************/
	ELSE
	BEGIN
		
		UPDATE [dbo].[ClassroomConfiguration]
		SET
			[ClassroomId] = @ClassroomId
			,[M365GroupName] = CC.[M365GroupName]
			,[RgIndex] = CC.[RgIndex]
			,[RgName] = CC.[RgName]
			,[RgDeploymentUrl] = CC.[RgDeploymentUrl]
			,[RgTemplateLink] = CC.[RgTemplateLink]
			,[RgOperationUrl] = CC.[RgOperationUrl]
			,[BastionDeploymentUrl] = CC.[BastionDeploymentUrl]
			,[BastionTemplateLink] = CC.[BastionTemplateLink]
			,[BastionOperationUrl] = CC.[BastionOperationUrl]
			,[UpdatedBy] = @UpsertedBy
			,[UpdatedOn] = GETUTCDATE()
		FROM (SELECT TOP 1 * FROM @ClassroomConfiguration) CC
		WHERE [Id] = @ClassroomConfigurationId;

	END

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Core_ClassroomSchedule_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Core_ClassroomSchedule_Upsert]
	@ClassroomId INT,
	@ClassroomSchedule [dbo].[ClassroomScheduleDataType] READONLY,
	@UpsertedBy NVARCHAR(255),
	@ClassroomScheduleId INT = NULL OUTPUT
AS
BEGIN

	/********************************************************/
	/*	IMPORTANT											*/
	/*	ONE & ONLY ONE ROW EXPECTED FOR	@ClassroomSchedule	*/
	/*	ONLY ONE SCHEDULE BY CLASSROOM						*/
	/*		-> TODO: MODIFY MODEL							*/
	/********************************************************/

	-- USE @ClassroomId to get @ClassroomScheduleId
	SET @ClassroomScheduleId = NULL;

	/****************************************/
	/*	CHECK IF CLASSROOM SCHEDULE EXISTS	*/
	/*	INITIALIZE @ClassroomScheduleId		*/
	/****************************************/
	SELECT TOP 1 @ClassroomScheduleId = [Id]
	FROM [dbo].[ClassroomSchedule]
	WHERE [ClassroomId] = @ClassroomId
	
	/************************************/
	/*	IF @ClassroomScheduleId is null	*/
	/*		-> CREATE ClassroomSchedule	*/
	/************************************/
	IF (@ClassroomScheduleId IS NULL)
	BEGIN

		INSERT INTO [dbo].[ClassroomSchedule]
			([ClassroomId], [TimeZone], [StartDay], [EndDay], [StartTime], [EndTime],
			[Monday], [Tuesday], [Wednesday], [Thursday], [Friday], [Saturday], [Sunday],
			[CreatedBy], [CreatedOn])
		SELECT TOP 1
			@ClassroomId, [TimeZone], [StartDay], [EndDay], [StartTime], [EndTime],
			[Monday], [Tuesday], [Wednesday], [Thursday], [Friday], [Saturday], [Sunday],
			@UpsertedBy, GETUTCDATE()
		FROM @ClassroomSchedule;

		SET @ClassroomScheduleId = SCOPE_IDENTITY();

	END
	/****************************************/
	/*	IF @ClassroomScheduleId is not null	*/
	/*		-> UPDATE ClassroomSchedule		*/
	/****************************************/
	ELSE
	BEGIN
		
		UPDATE [dbo].[ClassroomSchedule]
		SET
			[ClassroomId] = @ClassroomId
			,[TimeZone] = CS.[TimeZone]
			,[StartDay] = CS.[StartDay]
			,[EndDay] = CS.[EndDay]
			,[StartTime] = CS.[StartTime]
			,[EndTime] = CS.[EndTime]
			,[Monday] = CS.[Monday]
			,[Tuesday] = CS.[Tuesday]
			,[Wednesday] = CS.[Wednesday]
			,[Thursday] = CS.[Thursday]
			,[Friday] = CS.[Friday]
			,[Saturday] = CS.[Saturday]
			,[Sunday] = CS.[Sunday]
			,[UpdatedBy] = @UpsertedBy
			,[UpdatedOn] = GETUTCDATE()
		FROM (SELECT TOP 1 * FROM @ClassroomSchedule) CS
		WHERE [Id] = @ClassroomScheduleId;

	END

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Core_ClassroomStudent_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Core_ClassroomStudent_Upsert]
	@ClassroomId INT,
	@ClassroomStudents [dbo].[ClassroomStudentDataType] READONLY,
	@DepartmentId INT,
	@UpsertedBy NVARCHAR(255)
AS
BEGIN

	-- DELETE REMOVED STUDENTS FROM CLASSRROM
	DELETE CS
	FROM [dbo].[ClassroomStudent] CS
	LEFT OUTER JOIN @ClassroomStudents _CS
		ON (@ClassroomId = CS.[ClassroomId] AND _CS.[StudentId] = CS.[StudentId])
	WHERE
		CS.[ClassroomId] = @ClassroomId
		AND _CS.[StudentId] IS NULL;

	-- UPDATE STUDENTS FROM CLASSRROM
	UPDATE CS
	SET
		[StudentIndex] = _CS.[StudentIndex]
		,[UpdatedBy] = @UpsertedBy
		,[UpdatedOn] = GETUTCDATE()
	FROM [dbo].[ClassroomStudent] CS
	INNER JOIN  @ClassroomStudents _CS
		ON (@ClassroomId = CS.[ClassroomId] AND _CS.[StudentId] = CS.[StudentId]);

	-- ADD  NEW STUDENTS TO CLASSRROM
	INSERT INTO [dbo].[ClassroomStudent]
		([ClassroomId], [StudentId], [StudentIndex], [CreatedBy], [CreatedOn])
	SELECT
		@ClassroomId
		,_CS.[StudentId]
		,_CS.[StudentIndex]
		,@UpsertedBy
		,GETUTCDATE()
	FROM @ClassroomStudents _CS
	LEFT OUTER JOIN [dbo].[ClassroomStudent] CS
		ON (CS.[StudentId] = _CS.[StudentId] AND CS.[ClassroomId] = @ClassroomId)
	WHERE CS.[StudentId] IS NULL;

	-- CREATE USER DEPARTMENT ROLE FOR STUDENTS	
	DECLARE @RoleSku NVARCHAR(255) = 'class_student';
	DECLARE @RoleId INT = (SELECT Id FROM Role WHERE Sku=@RoleSku);
	
	IF @RoleId IS NULL
	BEGIN
		DECLARE @ErrorMsg NVARCHAR(255);			
		SET @ErrorMsg='Role with Sku ' + @RoleSku + ' not exists';			
		RAISERROR(@ErrorMsg, 1, 1);
	END
	
	DECLARE @UserDepartmentRole UserDepartmentRoleType;

	INSERT INTO @UserDepartmentRole(Id, DepartmentId, RoleId, UserId)
	SELECT 0, @DepartmentId, @RoleId, _CS.StudentId
	FROM @ClassroomStudents _CS
	LEFT OUTER JOIN [dbo].[UserDepartmentRole] UDR
		ON (UDR.UserId = _CS.StudentId AND UDR.DepartmentId = @DepartmentId AND UDR.RoleId = @RoleId)
	WHERE UDR.[Id] IS NULL;
	
	EXEC [dbo].[usp_Api_UserDepartmentRole_Add] @UserDepartmentRole;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Core_ClassroomTrainer_Add]...';


GO
CREATE PROCEDURE [dbo].[usp_Core_ClassroomTrainer_Add]
(
	@DepartmentId INT,
	@InstructorId NVARCHAR(255)
)
AS
BEGIN
	DECLARE @RoleSku NVARCHAR(255) = 'class_trainer';
	DECLARE @RoleId INT = (SELECT Id FROM Role WHERE Sku=@RoleSku);
	
	IF @RoleId IS NULL
	BEGIN
		DECLARE @ErrorMsg NVARCHAR(255);			
		SET @ErrorMsg='Role with Sku ' + @RoleSku + ' not exists';			
		RAISERROR(@ErrorMsg, 1, 1);
	END

	IF NOT EXISTS (SELECT TOP 1 1 FROM [dbo].[UserDepartmentRole] WHERE DepartmentId = @DepartmentId AND UserId = @InstructorId AND RoleId = @RoleId)
	BEGIN
		DECLARE @UserDepartmentRole UserDepartmentRoleType;

		INSERT INTO @UserDepartmentRole(Id, DepartmentId, RoleId, UserId)
		VALUES (0, @DepartmentId, @RoleId, @InstructorId);

		EXEC [dbo].[usp_Api_UserDepartmentRole_Add] @UserDepartmentRole;
	END
END
GO
PRINT N'Creating Procedure [dbo].[usp_Api_ClassroomsManager_Upsert]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_ClassroomsManager_Upsert]
	@Classroom [dbo].[ClassroomDataType] READONLY,
	@ClassroomConfiguration [dbo].[ClassroomConfigurationDataType] READONLY,
	@ClassroomSchedule [dbo].[ClassroomScheduleDataType] READONLY,
	@ClassroomStudents [dbo].[ClassroomStudentDataType] READONLY,
	@UpsertedBy NVARCHAR(255),
	@ClassroomId INT = NULL OUTPUT
AS
BEGIN

	/************************************/
	/*	IMPORTANT						*/
	/*	ONE & ONLY ONE ROW EXPECTED FOR	*/
	/*		@Classroom					*/
	/*		@ClassroomConfiguration		*/
	/*		@ClassroomSchedule			*/
	/************************************/
	DECLARE @DepartmentId INT, @InstructorId NVARCHAR(255);

	/************************************/
	/*	IF @ClassroomId is null OR < 1	*/
	/*		-> CREATE Classroom			*/
	/************************************/
	IF (ISNULL(@ClassroomId, 0) < 1)
	BEGIN
	
		INSERT INTO [dbo].[Classroom]
			([Name], [Description], [DepartmentId], [InstructorId], [VmImageId], [VmSizeId], [VmPackId], [ClassroomTypeId], [Active], [CreatedBy], [CreatedOn])
		SELECT TOP 1
			[Name], [Description], [DepartmentId], [InstructorId], [VmImageId], [VmSizeId], [VmPackId], [ClassroomTypeId], 1, @UpsertedBy, GETUTCDATE()
		FROM @Classroom;

		SET @ClassroomId = SCOPE_IDENTITY();

		SELECT TOP 1 @DepartmentId = [DepartmentId], @InstructorId = [InstructorId] FROM @Classroom;

	END
	/********************************************/
	/*	IF @ClassroomId is not null AND >= 1	*/
	/*		-> CHECK IF CLASSROOM EXISTS		*/
	/*		-> UPDATE Classroom					*/
	/********************************************/
	ELSE
	BEGIN
		
		IF NOT EXISTS (SELECT TOP 1 [Id] FROM [dbo].[Classroom] WHERE [Id] = @ClassroomId)
		BEGIN

			DECLARE @ErrorMsg NVARCHAR(255);
			
			SET @ErrorMsg='Classroom with Id ' + CAST(@ClassroomId AS NVARCHAR(50)) + ' not exists';
			
			RAISERROR(@ErrorMsg, 1, 1);

		END

		UPDATE [dbo].[Classroom]
			SET
				[Name] = C.[Name]
				,[Description] = C.[Description]
				,[InstructorId] = C.[InstructorId]
				,[VmImageId] = C.[VmImageId]
				,[VmSizeId] = C.[VmSizeId]
				,[VmPackId] = C.[VmPackId]
				,[ClassroomTypeId] = C.[ClassroomTypeId]
				,[UpdatedBy] = @UpsertedBy
				,[UpdatedOn] = GETUTCDATE()
		FROM (SELECT TOP 1 * FROM @Classroom) C
		WHERE [Id] = @ClassroomId;

	END

	DECLARE @ClassroomConfigurationId INT
	EXEC [dbo].[usp_Core_ClassroomConfiguration_Upsert] @ClassroomId, @ClassroomConfiguration, @UpsertedBy, @ClassroomConfigurationId OUTPUT;

	DECLARE @ClassroomScheduleId INT;
	EXEC [dbo].[usp_Core_ClassroomSchedule_Upsert] @ClassroomId, @ClassroomSchedule, @UpsertedBy, @ClassroomScheduleId OUTPUT;
	
	EXEC [dbo].[usp_Core_ClassroomStudent_Upsert] @ClassroomId, @ClassroomStudents, @DepartmentId, @UpsertedBy;

	EXEC [dbo].[usp_Core_ClassroomTrainer_Add] @DepartmentId, @InstructorId;

END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_DepartmentOrganization_ListByUserId]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_DepartmentOrganization_ListByUserId]
	@UserId NVARCHAR(255)
AS
BEGIN

	DECLARE @DepartmentsLv1 TABLE (Id int);
	INSERT INTO @DepartmentsLv1 (Id) SELECT Id FROM Department WHERE DepartmentParentId IS NULL;

	IF (ISNULL(@UserId, '') <> '')
	BEGIN
		DECLARE @AllowedDepartments TABLE (DepartmentId INT, DepartmentParentId INT, OrganizationId INT, RoleId INT)
		INSERT INTO @AllowedDepartments
		EXEC [dbo].[usp_Api_UserDepartmentRole_ListByUserId] @UserId
	    		
		SELECT DISTINCT
			Department.Id as Id, Department.Name as Name, Department.OrganizationId as OrganizationId, 
			Organization.Name as OrganizationName, Department.DepartmentParentId as DepartmentParentId,
			CASE 
				WHEN Department.DepartmentParentId IS NULL THEN 1
				WHEN d1.Id IS NOT NULL THEN 2
				ELSE 3
			END as Level
		FROM Department
		INNER JOIN Organization on Department.OrganizationId = Organization.Id
		INNER JOIN @AllowedDepartments ad on ad.DepartmentId = Department.Id
		LEFT JOIN @DepartmentsLv1 d1 on d1.Id = Department.DepartmentParentId
	END
	ELSE
	BEGIN
		SELECT DISTINCT 
			Department.Id as Id, Department.Name as Name, Department.OrganizationId as OrganizationId, 
			Organization.Name as OrganizationName, Department.DepartmentParentId as DepartmentParentId,
			CASE 
				WHEN Department.DepartmentParentId IS NULL THEN 1
				WHEN d1.Id IS NOT NULL THEN 2
				ELSE 3
			END as Level
		FROM Department
		INNER JOIN Organization on Department.OrganizationId = Organization.Id
		LEFT JOIN @DepartmentsLv1 d1 on d1.Id = Department.DepartmentParentId
	END
END;
GO
PRINT N'Creating Procedure [dbo].[usp_Api_UserDepartmentRole_List]...';


GO
CREATE PROCEDURE [dbo].[usp_Api_UserDepartmentRole_List]
	@UserId NVARCHAR(255)
AS
BEGIN
	DECLARE @AllowedDepartments TABLE (DepartmentId INT, DepartmentParentId INT, OrganizationId INT, RoleId INT)
	INSERT INTO @AllowedDepartments
	EXEC [dbo].[usp_Api_UserDepartmentRole_ListByUserId] @UserId

	SELECT DISTINCT 
		udr.[Id], 
		udr.[DepartmentId], 
		udr.[RoleId], 
		udr.[UserId], 
		Department.Name as DepartmentName, 
		Organization.Name as OrganizationName, 
		Role.Label as RoleName
	FROM UserDepartmentRole as udr 
	INNER JOIN Department on DepartmentId = Department.Id
	INNER JOIN Organization on Department.OrganizationId = Organization.Id
	INNER JOIN Role on udr.RoleId = Role.Id
	INNER JOIN @AllowedDepartments ad on 
		ad.DepartmentId = Department.Id and 
		ad.OrganizationId = Organization.Id
	WHERE udr.DeletedOn IS NULL
END;
GO
PRINT N'Creating Extended Property [dbo].[ClassroomConfiguration].[RgIndex].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Represent Rg Index defined during creation process - to improve', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'ClassroomConfiguration', @level2type = N'COLUMN', @level2name = N'RgIndex';


GO
