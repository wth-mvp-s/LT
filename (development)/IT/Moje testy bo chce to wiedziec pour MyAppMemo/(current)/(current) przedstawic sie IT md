ngrx is a state management library for Angular applications, inspired by the popular Redux library. It provides a set of tools and patterns for managing application state in a consistent and predictable way, allowing developers to easily share data between components, manage asynchronous operations, and simplify testing.

The main concepts in ngrx are Actions, Reducers, and Effects. Actions are plain objects that represent an event or intention in the system, such as a user clicking a button or an API request completing. Reducers are pure functions that take the current state of the application and an action, and return a new state based on the action. Effects are used to handle side-effects, such as making HTTP requests or dispatching additional actions, and are implemented as a set of RxJS Observables.

By using ngrx, developers can create a centralized store of application state that can be accessed and modified from any component, making it easier to reason about complex data flows and avoid common pitfalls such as race conditions and inconsistent state.



RxJS is a library for reactive programming using Observables, which are a way of representing streams of data or events that can be asynchronously processed over time. RxJS is often used in Angular applications, but can also be used in other JavaScript frameworks or standalone applications.

Observables in RxJS can emit values over time, and can be used to handle asynchronous operations such as user input, network requests, and animations. Observables can be combined and transformed using operators, which allow for powerful data manipulation and processing.

RxJS also provides a set of utility functions for working with Observables, such as ways to create Observables from existing data sources, ways to handle errors, and ways to control the flow of data. In addition, RxJS includes a powerful scheduler system that allows developers to control when and how data is processed, which can be especially useful in performance-critical applications.

Overall, RxJS provides a powerful and flexible way to handle asynchronous programming in JavaScript, and can be especially useful for handling complex data flows and events in reactive applications.


SwitchMap - fonction, operateur de transformation, utiliser pour connecter une observable d'entree, a une observable de sortie

ofType - c'est comme filtre mais pour le stream